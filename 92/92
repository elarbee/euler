from EulerUtils.Tools import digits
import time

start_time = time.time()

# Sum of the square of each digit of a number
def square_sum(n):
    n = digits(n)
    n = map(lambda x:x**2,n)
    return sum(n)

def classify(n):
    return ''.join(sorted(str(n)))

# Starting Digits that are known to end at 89
ends_in_89 = {"1":False, "89":True}

# How many starting numbers below ten million will arrive at 89
# Starts at one to account for 80

limit = 10
numbers = range(1,limit)

for i in numbers:
    n = i
    key = classify(n)
    chain = []
    while key not in ends_in_89:
        if ends_in_89[key]:
            for j in chain:
                ends_in_89[classify(j)] = True
        else:
            for j in chain:
                ends_in_89[classify(j)] = False
        chain.append(key)
        n = square_sum(n)
        key = classify(n)



print("--- %s seconds ---" % (time.time() - start_time))